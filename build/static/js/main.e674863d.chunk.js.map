{"version":3,"sources":["components/textResult.jsx","components/form.jsx","App.js","serviceWorker.js","index.js"],"names":["TextResult","props","state","text","className","style","backgroundColor","marginTop","paddingBottom","paddingTop","Typography","variant","component","align","paragraph","display","this","Component","Form","formOptions","options","i","languagesData","length","obj","content","push","setState","onUpload","progressEvent","percentCompleted","Math","round","loaded","total","perc","console","log","onClickReset","initialState","onChangeHandler","event","selectedFile","target","files","isDisabled","value_diarization","handleOnClick","config","onUploadProgress","isLoading","data","FormData","append","value_lang","puntuation","speakers","file","axios","post","then","response","result_text","show","error","bind","label","value","onChange","evt","map","val","disabled","color","checked","currentTarget","class","raised","type","name","onClick","ProgressBar","now","Fragment","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e674863d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Typography } from '@material-ui/core';\nclass TextResult extends Component {\n    constructor(props) {\n        super(props);\n          this.state = {\n            text: this.props.text,\n            \n        }\n        \n       \n    }\n    \n    render() { \n        return (\n            <div className=\"container-fluid h-100 d-flex justify-content-center\" style={{backgroundColor:\"#f1f3f4\",marginTop:'5%',paddingBottom:'5%',paddingTop:'5%'}}>\n                <Typography variant=\"subtitle1\" component=\"subtitle1\" align=\"justify\" paragraph=\"true\" display=\"block\">  \n                    {this.state.text}\n                </Typography>\n                \n            </div>\n\n        );\n    }\n}\n \nexport default TextResult;","import React, { Component } from 'react';\nimport Select, {Option} from '@material/react-select';\nimport {Switch} from '@rmwc/switch';\nimport {Button} from '@rmwc/button';\nimport '@material/react-list/dist/list.css';\nimport '@material/react-menu-surface/dist/menu-surface.css';\nimport '@material/react-menu/dist/menu.css';\nimport '@material/react-select/dist/select.css';\nimport '@material/react-layout-grid/dist/layout-grid.css';\nimport '@rmwc/switch/styles';\nimport './style.css'\nimport PublishIcon from '@material-ui/icons/Publish';\nimport SendIcon from '@material-ui/icons/Send';\nimport axios from 'axios';\nimport TextResult from './textResult';\nimport {LinearProgress} from '@rmwc/linear-progress';\nimport languagesData from './languages.json';\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { Line } from 'rc-progress';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.initialState\n        \n        \n        this.handleOnClick = this.handleOnClick.bind(this);\n        this.onUpload=this.onUpload.bind(this)\n\n    }\n    componentDidMount(){\n        this.formOptions();\n\n    };\n    formOptions=()=>{\n        const options=[];\n        for(var i = 0; i < languagesData.length; i++) {\n            var obj = {};\n            // console.log(languagesData[i][1].contentn            obj['value'] = languagesData[i][1].contentn            obj['label'] = languagesData[i][0].content;\n            options.push(obj);\n        }\n        this.setState({options:options})\n\n    }\n    get initialState() {\n        return {\n            value_lang: \"pt-BR\",\n            value_diarization:\"Off\",\n            puntuation:false,\n            selectedFile: null,\n            loaded:true,\n            result_text:'', \n            show:false,\n            isLoading: false,\n            options:[],\n            speakers:'1',\n            disabled:true,\n            perc:0\n        };\n      }\n    \n    onUpload=progressEvent=>{\n        var percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n        this.setState({perc:percentCompleted})\n        console.log(this.state.perc)\n    }\n    onClickReset=()=>{\n        this.setState(this.initialState)\n    }\n\n    onChangeHandler=event=>{\n        this.setState({loaded:false})\n        this.setState({\n          selectedFile: event.target.files[0],\n          \n        })\n        \n    }\n    \n    isDisabled=()=>{\n        if (this.state.value_diarization==='On'){\n            return false\n        }else{\n            return true\n        }\n    }\n    handleOnClick=()=>{\n        \n        const config = {\n            onUploadProgress:this.onUpload\n            // onUploadProgress: function(progressEvent) {\n            //   var percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n            //   this.setState({perc:percentCompleted})\n            //   console.log(this.state.perc)\n            // }\n        }\n\n        this.setState({ isLoading: true });\n        const data = new FormData()\n        data.append('file', this.state.selectedFile)\n        data.append('lang',this.state.value_lang )\n        data.append('diari',this.state.value_diarization)\n        data.append('punt',this.state.puntuation)\n        data.append('n_speakers',this.state.speakers)\n        console.log('DATA',data.file)\n        //'https://speechtotextall.herokuapp.com/speechtotext/'\n        // 'http://localhost:3000/speechtotext'\n        axios.post('http://138.197.132.198:3000/speechtotext',data,config)\n          .then((response)=>{\n            console.log('here front',response)\n            \n            this.setState({result_text:response.data,show:true,isLoading: false})\n            \n            \n            \n  \n          },(error)=>{\n            console.log(error)\n          })\n  \n    }\n    \n    \n    render() { \n        return (\n            \n            \n            <div className=\"container\">\n                <div className=\"container-fluid\" style={{marginTop:'5%',paddingBottom:'5%',paddingTop:'5%'}}>\n                    \n                    \n                        <div className=\"row\">\n                            <Select\n                                label='Language'\n                                value={this.state.value_lang}\n                                onChange={(evt) => this.setState({value_lang: evt.target.value})}\n                                className=\"container-fluid\"\n                                \n                                        \n                            \n                            >   \n                                {this.state.options.map((val)=><Option value={val.value}>{val.label}</Option>)}\n                                \n                                \n                            </Select>\n\n                        </div>\n                        <div className=\"row align-items-center\" style={{marginTop:'5%'}}>\n                            <div className=\"col-sm\">\n                            \n    \n                                \n                                <Select\n                                    label='Speaker diarization'\n                                    value={this.state.value_diarization}\n                                    onChange={(evt) => this.setState({value_diarization: evt.target.value,disabled:!this.state.disabled})}\n                                    className=\"container-fluid\"\n                                    color='primary'\n                                >   \n\n                                    <Option value='Off'>Off</Option>\n                                    <Option value='On'>On</Option>\n                                </Select>\n                            \n                                                                                                                                                                    \n                            </div>\n                            <div className=\"col-sm\">                                \n                                <Select \n                                    disabled={this.state.disabled}\n                                    label='Speakers'\n                                    value={this.state.speakers}\n                                    onChange={(evt) => this.setState({speakers: evt.target.value})}\n                                    className=\"container-fluid\"\n                                    color='primary'\n                                >   \n\n                                    <Option value='1'>1 Speaker</Option>\n                                    <Option value='2'>2 Speakers</Option>\n                                    <Option value='3'>3 Speakers</Option>\n                                    <Option value='4'>4 Speakers</Option>\n                                    <Option value='5'>5 Speakers</Option>\n                                    \n                                </Select>\n                            \n                                                                                                                                                                    \n                            </div>\n                            <div className=\"col-sm h-100 d-flex justify-content-center\">\n                                <Switch\n                                    checked={this.state.puntuation}\n                                    onChange={evt => this.setState({puntuation:!!evt.currentTarget.checked})}\n                                    label=\"Puntuation\"\n                                />\n                            </div>\n                            \n\n                        </div>\n                        <div className=\"row\" style={{marginTop:'5%'}} >\n                            \n                            <div className=\"col-sm\">                          \n                            \n\n                                <div class=\"upload-btn-wrapper\">\n                                \n                                    <Button raised variant='contained' color='primary'><PublishIcon></PublishIcon> Choose File </Button>\n                                    <input  type=\"file\" name=\"audio\" onChange={this.onChangeHandler}/>\n                                \n                                </div>\n\n                            </div>\n                            <div className=\"col-sm\">\n                                \n                                \n                                <Button raised disabled={ this.state.loaded || this.state.isLoading} onClick={this.handleOnClick}><SendIcon></SendIcon> To Text</Button>\n                                \n                                \n\n                            </div>\n                            \n                        \n                        </div>\n                        \n                        \n                        \n                                \n                        \n                        \n                    \n                </div>\n                \n                {this.state.isLoading && <ProgressBar now={this.state.perc} label={this.state.perc} />}\n                { this.state.show && <React.Fragment><TextResult text={this.state.result_text} /> <Button onClick={this.onClickReset} icon='refresh' ></Button></React.Fragment>}\n\n                 \n            </div>\n            \n\n        );\n    }\n}\n \nexport default Form;","import React from 'react';\nimport Form from './components/form';\nimport 'fontsource-roboto';\n\nfunction App() {\n  return (\n    <div className=\"App container\" style={{backgroundColor:\"#f1f3f4\"}}>\n      \n      <Form></Form>\n      \n      \n      \n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}